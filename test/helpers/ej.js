{ db: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: { name: 'db', connector: [Object], file: 'db.json', debug: false },
     connected: false,
     connecting: true,
     name: 'db',
     connector: 
      Memory {
        isTransaction: false,
        cache: {},
        ids: {},
        _models: {},
        name: 'memory',
        settings: [Object],
        fileQueue: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     pendingConnectCallbacks: [ [Function: bound postInit] ],
     adapter: 
      Memory {
        isTransaction: false,
        cache: {},
        ids: {},
        _models: {},
        name: 'memory',
        settings: [Object],
        fileQueue: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  Db: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: { name: 'db', connector: [Object], file: 'db.json', debug: false },
     connected: false,
     connecting: true,
     name: 'db',
     connector: 
      Memory {
        isTransaction: false,
        cache: {},
        ids: {},
        _models: {},
        name: 'memory',
        settings: [Object],
        fileQueue: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     pendingConnectCallbacks: [ [Function: bound postInit] ],
     adapter: 
      Memory {
        isTransaction: false,
        cache: {},
        ids: {},
        _models: {},
        name: 'memory',
        settings: [Object],
        fileQueue: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  redisDb: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { delete: [Object],
        deleteAll: [Object],
        get: [Object],
        set: [Object],
        expire: [Object],
        ttl: [Object],
        iterateKeys: [Object],
        keys: [Object],
        getConnector: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 6379,
        url: '',
        password: '',
        name: 'redis_db',
        db: 0,
        connector: 'kv-redis',
        debug: false },
     connected: true,
     connecting: false,
     name: 'redis_db',
     connector: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     adapter: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     DataAccessObject: 
      { [Function]
        delete: [Function: keyValueDelete],
        deleteAll: [Function: deleteAll],
        get: [Function: keyValueGet],
        set: [Function: keyValueSet],
        expire: [Function: keyValueExpire],
        ttl: [Function: keyValueTtl],
        iterateKeys: [Function: keyValueIterateKeys],
        keys: [Function: keyValueKeys],
        getConnector: [Function] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  RedisDb: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { delete: [Object],
        deleteAll: [Object],
        get: [Object],
        set: [Object],
        expire: [Object],
        ttl: [Object],
        iterateKeys: [Object],
        keys: [Object],
        getConnector: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 6379,
        url: '',
        password: '',
        name: 'redis_db',
        db: 0,
        connector: 'kv-redis',
        debug: false },
     connected: true,
     connecting: false,
     name: 'redis_db',
     connector: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     adapter: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     DataAccessObject: 
      { [Function]
        delete: [Function: keyValueDelete],
        deleteAll: [Function: deleteAll],
        get: [Function: keyValueGet],
        set: [Function: keyValueSet],
        expire: [Function: keyValueExpire],
        ttl: [Function: keyValueTtl],
        iterateKeys: [Function: keyValueIterateKeys],
        keys: [Function: keyValueKeys],
        getConnector: [Function] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  redis_db: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { delete: [Object],
        deleteAll: [Object],
        get: [Object],
        set: [Object],
        expire: [Object],
        ttl: [Object],
        iterateKeys: [Object],
        keys: [Object],
        getConnector: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 6379,
        url: '',
        password: '',
        name: 'redis_db',
        db: 0,
        connector: 'kv-redis',
        debug: false },
     connected: true,
     connecting: false,
     name: 'redis_db',
     connector: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     adapter: 
      RedisKeyValueConnector {
        _models: {},
        name: 'kv-redis',
        settings: [Object],
        dataSource: [Circular],
        _client: [Object],
        _packer: [Object],
        DataAccessObject: [Object],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function] },
     DataAccessObject: 
      { [Function]
        delete: [Function: keyValueDelete],
        deleteAll: [Function: deleteAll],
        get: [Function: keyValueGet],
        set: [Function: keyValueSet],
        expire: [Function: keyValueExpire],
        ttl: [Function: keyValueTtl],
        iterateKeys: [Function: keyValueIterateKeys],
        keys: [Function: keyValueKeys],
        getConnector: [Function] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  psqlDb: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_dev',
        password: 'frattis',
        name: 'psql_db',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'psql_db',
     connector: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     _events: {},
     _eventsCount: 0 },
  PsqlDb: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_dev',
        password: 'frattis',
        name: 'psql_db',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'psql_db',
     connector: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     _events: {},
     _eventsCount: 0 },
  psql_db: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_dev',
        password: 'frattis',
        name: 'psql_db',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'psql_db',
     connector: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: [Object],
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true },
     _events: {},
     _eventsCount: 0 },
  vjudgePsqlTest: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_test',
        password: 'frattis',
        name: 'vjudge_psql_test',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'vjudge_psql_test',
     connector: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  VjudgePsqlTest: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_test',
        password: 'frattis',
        name: 'vjudge_psql_test',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'vjudge_psql_test',
     connector: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } },
  vjudge_psql_test: 
   DataSource {
     modelBuilder: 
      ModelBuilder {
        models: [Object],
        definitions: [Object],
        settings: {},
        mixins: [Object],
        defaultModelBaseClass: [Object],
        _nameCount: 5 },
     models: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        Application: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_5: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     definitions: 
      { Model: [Object],
        PersistedModel: [Object],
        KeyValueModel: [Object],
        Email: [Object],
        AnonymousModel_2: [Object],
        AnonymousModel_3: [Object],
        AnonymousModel_1: [Object],
        AnonymousModel_4: [Object],
        AnonymousModel_0: [Object],
        AnonymousModel_5: [Object],
        Application: [Object],
        AccessToken: [Object],
        User: [Object],
        RoleMapping: [Object],
        Role: [Object],
        ACL: [Object],
        Scope: [Object],
        Change: [Object],
        Checkpoint: [Object],
        Problem: [Object],
        Test: [Object],
        ProblemSet: [Object],
        Submission: [Object],
        Human: [Object],
        Course: [Object],
        HumanRole: [Object],
        UserRoleCourse: [Object],
        ProblemProblemSet: [Object] },
     juggler: 
      { LDL: [Object],
        ModelBuilder: [Object],
        Schema: [Object],
        DataSource: [Object],
        ModelBaseClass: [Object],
        GeoPoint: [Object],
        ValidationError: [Object],
        Transaction: [Object],
        KeyValueAccessObject: [Object],
        getCurrentContext: [Function] },
     _operations: 
      { _forDB: [Object],
        defaultScope: [Object],
        applyScope: [Object],
        applyProperties: [Object],
        lookupModel: [Object],
        getConnector: [Object],
        _allowExtendedOperators: [Object],
        create: [Object],
        upsert: [Object],
        patchOrCreate: [Object],
        updateOrCreate: [Object],
        upsertWithWhere: [Object],
        patchOrCreateWithWhere: [Object],
        replaceOrCreate: [Object],
        findOrCreate: [Object],
        exists: [Object],
        findById: [Object],
        findByIds: [Object],
        all: [Object],
        _getSetting: [Object],
        _normalize: [Object],
        _coerce: [Object],
        find: [Object],
        findOne: [Object],
        destroyAll: [Object],
        deleteAll: [Object],
        remove: [Object],
        deleteById: [Object],
        destroyById: [Object],
        removeById: [Object],
        count: [Object],
        updateAll: [Object],
        update: [Object],
        replaceById: [Object],
        scope: [Object],
        normalizeInclude: [Object],
        include: [Object],
        hasMany: [Object],
        belongsTo: [Object],
        hasAndBelongsToMany: [Object],
        hasOne: [Object],
        referencesMany: [Object],
        embedsOne: [Object],
        embedsMany: [Object],
        beginTransaction: [Object],
        Transaction: [Object],
        save: [Object],
        isNewRecord: [Object],
        destroy: [Object],
        delete: [Object],
        setAttribute: [Object],
        updateAttribute: [Object],
        setAttributes: [Object],
        unsetAttribute: [Object],
        replaceAttributes: [Object],
        patchAttributes: [Object],
        updateAttributes: [Object],
        reload: [Object] },
     settings: 
      { host: '127.0.0.1',
        port: 5432,
        url: '',
        database: 'vjudge_psql_test',
        password: 'frattis',
        name: 'vjudge_psql_test',
        user: 'progra2020',
        connector: 'postgresql',
        debug: false,
        Promise: [Object] },
     connected: true,
     connecting: true,
     name: 'vjudge_psql_test',
     connector: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     adapter: 
      PostgreSQL {
        _models: {},
        name: 'postgresql',
        settings: [Object],
        clientConfig: [Object],
        pg: [Object],
        dataSource: [Circular],
        log: [Function],
        logger: [Function],
        _mixins: [Array],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        client: [Object] },
     DataAccessObject: 
      { [Function]
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        _allowExtendedOperators: [Function],
        create: [Function],
        upsert: [Function],
        patchOrCreate: [Function],
        updateOrCreate: [Function],
        upsertWithWhere: [Function],
        patchOrCreateWithWhere: [Function],
        replaceOrCreate: [Function: replaceOrCreate],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteById: [Function: deleteById],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        count: [Function],
        updateAll: [Function],
        update: [Function],
        replaceById: [Function],
        scope: [Function],
        _mixins: [Array],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object] },
     createModel: [Function],
     app: 
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 4,
        locals: [Object],
        mountpath: '/',
        __expressLazyRouter: [Function: lazyrouter],
        _sortLayersByPhase: [Function],
        _findLayerByHandler: [Function],
        middleware: [Function],
        defineMiddlewarePhases: [Function],
        middlewareFromConfig: [Function],
        boot: [Function],
        _verifyAuthModelRelations: [Function],
        enableAuth: [Function],
        dataSources: [Circular],
        datasources: [Circular],
        handler: [Function],
        remoteObjects: [Function],
        connector: [Function],
        dataSource: [Function],
        models: [Object],
        model: [Function],
        disuse: [Function],
        remotes: [Function],
        loopback: [Object],
        connectors: [Object],
        registry: [Object],
        start: [Function],
        booting: false,
        _models: [Array],
        _remotes: [Object],
        _handlers: undefined,
        _router: [Object],
        _requestHandlingPhases: [Array],
        _skipLayerSorting: false,
        isAuthEnabled: true } } }
